{"mappings":"AAAA,MAAAA,EACSC,MAAgB,IAChBC,OAAiB,0BAEKC,eACnBF,EAAAA,OAAOC,GAAWC,EACpBC,EAAAA,IAAaJ,EAAOC,EAAOC,GAE3BG,EAAiB,KACrBF,EAAWF,MAAQK,OAAOC,WAC1BJ,EAAWD,OAASI,OAAOE,YAC3BJ,EAAOC,yBAGTC,OAAOG,iBAAiB,SAAUJ,EAAeK,KAAKC,OACtDN,IAEOD,EAGDQ,YAAYX,EAAeC,GACjCS,KAAKV,MAAQA,EACbU,KAAKT,OAASA,EAGNG,iBACRM,KAAKV,MAAQK,OAAOC,WACpBI,KAAKT,OAASI,OAAOE,aCzBzB,MAAAK,EACED,YACUR,EACAU,QADAV,OAAAA,OACAU,IAAAA,EAGHC,cACLJ,KAAKG,IAAIC,OACFJ,KAGFK,iBACLL,KAAKG,IAAIE,UACFL,KAGFM,UAAUC,EAAWC,UAC1BR,KAAKG,IAAIG,UAAUC,EAAGC,GACfR,KAGFS,OAAOC,UACZV,KAAKG,IAAIM,OAAOC,GACTV,KAGFW,MAAMA,UACXX,KAAKG,IAAIS,UAAYD,EACdX,KAGFa,KAAKN,EAAWC,EAAWlB,EAAeC,UAC/CS,KAAKG,IAAIW,SAASP,EAAGC,EAAGlB,EAAOC,GAC/BS,KAAKG,IAAIY,iBACFf,MClCX,MAAAgB,kBAGoC,EAGlCf,YAAmBgB,EAAe,eAAfA,KAAAA,EACjBjB,KAAKkB,GAAKF,EAAOG,WACjBnB,KAAKoB,WAAAA,GAGAC,GAAGC,SACFC,EAAMvB,KAAKwB,OAAOF,GACxBtB,KAAKoB,WAAWG,GAAOD,EAGlBG,MAAMH,SACLC,EAAMvB,KAAKwB,OAAOF,UACjBtB,KAAKoB,WAAWG,GAGlBG,IAAyBT,UACvBjB,KAAKoB,WAAWH,GAGlBU,yBACEC,OAAOC,KAAK7B,KAAKoB,YAGnBU,oBACEC,QACLH,OAAOI,OAAOhC,KAAKoB,YAAYa,MAC5BX,GAAyB,eAAgBA,KAKxCE,OAAOF,UACNA,EAAUJ,ICxCrB,MAAAgB,EACEjC,YAA4BiB,QAAAA,GAAAA,GCC9B,MAAAiB,UAAAD,EACEjC,YACSM,EAAY,EACZC,EAAY,GAEnB4B,MAAM,kBAHC7B,EAAAA,OACAC,EAAAA,EAKF6B,IAAI9B,EAAWC,GACpBR,KAAKO,EAAIA,EACTP,KAAKQ,EAAIA,GCVb,MAAA8B,UAAAJ,EACEjC,YACSU,EAAgB,WAEvByB,MAAM,kBAFCzB,MAAAA,GCFX,MAAA4B,UAAAL,EACSJ,YAAsB,ECD/B,MAAAU,UAAAD,EACEtC,YACSX,EACAC,GAEP6C,MAAM,cAHC9C,MAAAA,OACAC,OAAAA,GCHX,MAAAkD,UAAAD,EACEvC,cACEmC,MAAM,GAAI,KCFd,MAAAM,UAAAR,EACEjC,cACEmC,MAAM,WCFV,MAAAO,UAAAJ,EACEtC,cACEmC,MAAM,SCFV,MAAAQ,UAAAL,EACEtC,cACEmC,MAAM,UCDV,MAAAS,UAAA7B,cACwC,iBAEjBT,EAAWC,SACxBsC,EAAAA,IAAWD,SACjBC,EAAKzB,GAAAA,IAAAA,GACLyB,EAAKzB,GAAAA,IAAAA,EAAarB,KAAK+C,KAAM/C,KAAK+C,OAClCD,EAAKzB,GAAAA,IAAAA,EAAiBd,EAAIP,KAAK+C,KAAMvC,EAAIR,KAAK+C,OAEvCD,EAGT7C,cACEmC,MAAM,SCZV,MAAAY,UAAAhC,gBACuBC,EAAe,gBAC5BgC,EAAAA,IAAaD,EAAa/B,UAChCgC,EAAO5B,GAAAA,IAAAA,EAAiB,EAAAwB,EAAeE,KAAM,EAAAF,EAAeE,OAC5DE,EAAO5B,GAAAA,IAAAA,EAAiB,UACxB4B,EAAO5B,GAAAA,IAAAA,GACP4B,EAAO5B,GAAAA,IAAAA,GAEA4B,EAGDhD,YAAYgB,GAClBmB,MAAMnB,ICbV,MAAAiC,UAAAL,cACwC,iBAEjBtC,EAAWC,SACxBsC,EAAAA,EAAkBK,OAAO5C,EAAGC,UAClCsC,EAAKzB,GAAAA,IAAAA,EAAiB,YACfyB,GCNX,MAAAM,UAAAP,cACwC,iBAEjBtC,EAAWC,SACxBsC,EAAAA,EAAkBK,OAAO5C,EAAGC,UAClCsC,EAAKzB,GAAAA,IAAAA,EAAiB,SACtByB,EAAKzB,GAAAA,IAAAA,GACEyB,GCAX,MAAAO,aACoBC,cACLD,EAAOC,GAGbC,OAAO9D,EAAgB+D,IAEvBC,OAAOC,EAAcC,IAErBC,kBACCC,EAAmB7D,KAAKsD,OAAO3B,yBAdfmC,EAeDD,EAfmBE,EAeD/D,KAAKgE,SAd9CC,KAAKC,UAAUJ,EAAEK,UAAYF,KAAKC,UAAUH,EAAEI,QAenCnE,KAGF,KAnBc,IAAC8D,EAAkBC,0BA0BhC9D,YACEqD,QAAAA,OAAAA,GC3Bd,MAAAc,UAAAf,aACoBC,cACLc,EAAed,GAGrBC,OAAO9D,EAAgB+D,SACtB7C,EAAQX,KAAKqE,cACX9D,EAAAA,EAAGC,GAAMR,KAAKsE,qBACdhF,EAAAA,OAAOC,GAAWS,KAAKuE,WAE/Bf,EAAE7C,MAAMA,GAAOL,UAAUC,EAAGC,GAAGK,KAAK,EAAG,EAAGvB,EAAOC,yBAIzC,YAAa,SAGf8E,kBACCrE,KAAKsD,OAAO5B,IAAe,cAAcf,OAAS,QAGnD2D,qBACCtE,KAAKsD,OAAO5B,IAAe,aAG5B6C,kBACCvE,KAAKsD,OAAO5B,IAAW,UC1BlC,MAAA8C,UAAAnB,aACoBC,cACLkB,EAAelB,GAGrBG,OAAOC,EAAcC,0BAIlB,YAAa,WCXzB,MAAAc,eACiC,cACD,EAO9BxE,YAAmByE,EAAe,UAAfA,KAAAA,EACjB1E,KAAK2E,QAGAC,QAAQrE,EAAWC,EAAWqE,QACfC,IAAhB9E,KAAK+E,IAAIxE,SAAuCuE,IAAnB9E,KAAK+E,IAAIxE,GAAGC,KAC3CR,KAAK+E,IAAIxE,GAAGC,GAAKqE,GAIdG,QAAQzE,EAAWC,UACjBR,KAAK+E,IAAIxE,IAAMP,KAAK+E,IAAIxE,GAAGC,GAG7ByE,SAAS1E,EAAWC,GACzBR,KAAKkF,OAAS3E,EAAAA,EAAewC,KAC7B/C,KAAKmF,OAAS3E,EAAAA,EAAeuC,KAGxBqC,mBAAmBC,GACxBrF,KAAK+E,IAAIO,SAAQ,CAACC,EAAKhF,KACrBgF,EAAID,SAAQ,CAACpE,EAAIV,KACXU,IAAOuD,EAASe,KAKpBH,EAAMI,MAAAA,EAAkBtC,OAAO5C,EAAGC,IAJhC6E,EAAMI,MAAAA,EAAiBtC,OAAO5C,EAAGC,UASlCmE,QACL3E,KAAK+E,IAAMW,MAAM1F,KAAK0E,MAAMiB,KAAK,GAAGZ,KAClC,IAAMW,MAAM1F,KAAK0E,MAAMiB,KAAK,GAAGZ,KAAI,IAAMN,EAASmB,WCtCxD,MAAAC,EAKE5F,cACED,KAAK8F,SAAAA,GACL9F,KAAK+F,eAAAA,GAGAC,KAAKvG,GACVO,KAAK+E,IClBT,sBACyBL,EAAe,WAC9BK,EAAAA,IAAAA,EAA6BL,UACnC1E,KAAKiG,kBAAkBlB,GACvB/E,KAAKkG,kBAAkBnB,GAEhBA,2BAGwBA,WACvBoB,EAAE,EAAGA,EAAIpB,EAAIL,KAAMyB,YACjBC,EAAE,EAAGA,EAAIrB,EAAIL,KAAM0B,IAAAA,OAEnBtD,EADUuD,KAAKC,SAAW,GACnBC,EAAmBX,MAAAA,EAAiBJ,KACjDT,EAAIH,QAAQuB,EAAGC,EAAGtD,6BAKSiC,GAC/BA,EAAIE,SAAS,EAAG,KDFSuB,SAAS,IAClCxG,KAAK+E,IAAIK,mBAAmBpF,mBAEpBkF,EAAAA,OAAQC,GAAWnF,KAAK+E,IAChC/E,KAAKyF,MAAAA,EAAmBtC,OAAO,WAAY+B,EAAQC,GAG9C5B,OAAO9D,EAAgB+D,GAC5BxD,KAAK+F,eAAeT,SAAShC,MACZmD,IAAInD,GAAQC,OAAO9D,EAAQ+D,GAC1CxD,KAAK+F,eAAeW,WAIjBjD,OAAOC,EAAcC,GAC1B3D,KAAK8F,SAASR,SAAShC,MACNmD,IAAInD,GAAQM,aAAaH,SAAOC,EAAOC,GAElDL,EAAOxB,cACT9B,KAAK2G,KAAKrD,MAKTmC,MAAMnC,EAAgB/C,EAAYC,WAC7BsE,IAANvE,QAAyBuE,IAANtE,EAAMsE,CACVxB,EAAO5B,IAAe,cAC7BW,MAAI9B,EAAGC,GAGnBR,KAAK8F,SAASxC,EAAOpC,IAAMoC,EAGrBqD,KAAKrD,GACXtD,KAAK+F,eAAea,KAAKtD,UEnDvBuD,EAASC,SAASC,eAAe,UACjCC,ICCN,MASE/G,YAAYR,GACVO,KAAKP,OAAAA,EAAgBwH,eAAexH,GACpCO,KAAKG,IAAMV,EAAOyH,WAAW,MAC7BlH,KAAKG,IAAIgH,uBAAwB,EACjCnH,KAAKG,IAAIiH,sBAAwB,OAG5BpB,KAAKqB,GACVrH,KAAKqH,KAAOA,EACZrH,KAAKsH,SAAAA,IAAAA,EAAwBtH,KAAKP,OAAQO,KAAKG,KAE/CH,KAAKqH,KAAKrB,KAAKhG,KAAKP,QACpBO,KAAKuH,wBAGCC,WACNxH,KAAKqH,KAAK5D,OAAOzD,KAAK0D,MAAO,GAE7B1D,KAAKG,IAAIsH,UAAU,EAAG,EAAGzH,KAAKP,OAAOH,MAAOU,KAAKP,OAAOF,QACxDS,KAAKqH,KAAK9D,OAAOvD,KAAKP,OAAQO,KAAKsH,UAEnCtH,KAAKuH,wBAGCA,wBACN5H,OAAO4H,sBAAsBvH,KAAKwH,SAASzH,KAAKC,SDnCxB6G,GACpBb,KAAAA,IECR,MACU0B,EAAY,EAIpBzH,cACED,KAAKqF,MAAAA,IAAAA,EAGPW,KAAKvG,GACHkI,QAAQC,IAAI,cACZ5H,KAAKqF,MAAMW,KAAKvG,GAGlB8D,OAAO9D,EAAgB+D,GACrBA,EAAE7C,MAAM,OAAOL,UAAU,GAAI,IAAIG,OAAOT,KAAK0H,GAAG7G,MAAM,IAAK,GAAI,GAAI,IACnE2C,EAAE7C,MAAM,UAAUE,KAAK,GAAI,GAAI,GAAI,IAEnCb,KAAKqF,MAAM9B,OAAO9D,EAAQ+D,GAG5BC,OAAOC,EAAcC,GACnB3D,KAAK0H,GAAK,IAAO/D,EAEjB3D,KAAKqF,MAAM5B,OAAOC,EAAOC","sources":["./src/game/engine/Canvas.ts","./src/game/engine/graphics/Graphics.ts","./src/game/entities/Entity.ts","./src/game/entities/components/Component.ts","./src/game/entities/components/Placeable.ts","./src/game/entities/components/Colorable.ts","./src/game/entities/components/Drawable.ts","./src/game/entities/components/Shape.ts","./src/game/entities/components/ShapeHuman.ts","./src/game/entities/components/Player.ts","./src/game/entities/components/Tile.ts","./src/game/entities/components/Solid.ts","./src/game/entities/EntityTile.ts","./src/game/entities/EntityPlayer.ts","./src/game/entities/EntityFloor.ts","./src/game/entities/EntityWall.ts","./src/game/entities/systems/System.ts","./src/game/entities/systems/RendererSystem.ts","./src/game/entities/systems/KeyboardSystem.ts","./src/game/world/WorldMap.ts","./src/game/world/World.ts","./src/game/world/WorldGenerate.ts","./src/game/index.ts","./src/game/engine/WebGame.ts","./src/game/Hagokia.ts"],"sourcesContent":["class Canvas {\n  public width: number = 800;\n  public height: number = 600;\n\n  public static fromHTMLCanvas(htmlCanvas: HTMLCanvasElement): Canvas {\n    const { width, height } = htmlCanvas;\n    const canvas = new Canvas(width, height);\n\n    const onWindowResize = (): void => {\n      htmlCanvas.width = window.innerWidth;\n      htmlCanvas.height = window.innerHeight;\n      canvas.onWindowResize();\n    };\n\n    window.addEventListener('resize', onWindowResize.bind(this));\n    onWindowResize();\n\n    return canvas;\n  }\n\n  private constructor(width: number, height: number) {\n    this.width = width;\n    this.height = height;\n  }\n\n  protected onWindowResize(): void {\n    this.width = window.innerWidth;\n    this.height = window.innerHeight;\n  }\n}\n\nexport default Canvas;\n","import Canvas from '../Canvas';\n\nclass Graphics {\n  constructor(\n    private canvas: Canvas,\n    private ctx: CanvasRenderingContext2D,\n  ) {}\n\n  public save(): Graphics {\n    this.ctx.save();\n    return this;\n  }\n\n  public restore(): Graphics {\n    this.ctx.restore();\n    return this;\n  }\n\n  public translate(x: number, y: number): Graphics {\n    this.ctx.translate(x, y);\n    return this;\n  }\n\n  public rotate(deg: number): Graphics {\n    this.ctx.rotate(deg);\n    return this;\n  }\n\n  public color(color: string): Graphics {\n    this.ctx.fillStyle = color;\n    return this;\n  }\n\n  public rect(x: number, y: number, width: number, height: number): Graphics {\n    this.ctx.fillRect(x, y, width, height);\n    this.ctx.resetTransform();\n    return this;\n  }\n}\n\nexport default Graphics;\n","import Component, { ComponentId } from './components';\n\nclass Entity {\n  public readonly id: number;\n\n  private static sequence: number = 0;\n  private components: Component[];\n\n  constructor(public name: string = 'Entity') {\n    this.id = Entity.sequence++;\n    this.components = [];\n  }\n\n  public is(component: Component): void {\n    const key = this.getKey(component);\n    this.components[key] = component;\n  }\n\n  public isNot(component: Component) {\n    const key = this.getKey(component);\n    delete this.components[key];\n  }\n\n  public get<T extends Component>(name: ComponentId): T | null {\n    return this.components[name];\n  }\n\n  public getComponentIds(): ComponentId[] {\n    return Object.keys(this.components) as ComponentId[];\n  }\n\n  public isDrawable(): boolean {\n    return Boolean(\n      Object.values(this.components).find(\n        (component: Component) => 'isDrawable' in component\n      )\n    );\n  }\n\n  private getKey(component: Component): string {\n    return component.id;\n  }\n}\n\nexport default Entity;\n","class Component {\n  constructor(public readonly id: string) {}\n}\n\nexport default Component;\n","import Component from './Component';\n\nclass Placeable extends Component {\n  constructor(\n    public x: number = 0,\n    public y: number = 0,\n  ) {\n    super('Placeable');\n  }\n\n  public set(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n}\n\nexport default Placeable;","import Component from './Component';\n\nclass Colorable extends Component {\n  constructor(\n    public color: string = 'hotpink',\n  ) {\n    super('Colorable');\n  }\n}\n\nexport default Colorable;\n","import Component from './Component';\n\nclass Drawable extends Component {\n  public isDrawable: boolean = true;\n}\n\nexport default Drawable;\n","import Drawable from './Drawable';\n\nclass Shape extends Drawable {\n  constructor(\n    public width: number,\n    public height: number,\n  ) {\n    super('Shape');\n  }\n}\n\nexport default Shape;\n","import Shape from './Shape';\n\nclass ShapeHuman extends Shape {\n  constructor() {\n    super(16, 32);\n  }\n}\n\nexport default ShapeHuman;\n","import Component from './Component';\n\nclass Player extends Component {\n  constructor() {\n    super('Player');\n  }\n}\n\nexport default Player;\n","import Drawable from './Drawable';\n\nclass Tile extends Drawable {\n  constructor() {\n    super('Tile');\n  }\n}\n\nexport default Tile;\n\n\n\n","import Drawable from './Drawable';\n\nclass Solid extends Drawable {\n  constructor() {\n    super('Solid');\n  }\n}\n\nexport default Solid;\n\n\n\n","import { Colorable, Placeable, Shape, Tile } from './components';\nimport Entity from './Entity';\n\nclass EntityTile extends Entity {\n  public static readonly SIZE: number = 32;\n\n  public static create(x: number, y: number): EntityTile {\n    const tile = new EntityTile();\n    tile.is(new Tile());\n    tile.is(new Shape(this.SIZE, this.SIZE));\n    tile.is(new Placeable(x * this.SIZE, y * this.SIZE));\n\n    return tile;\n  }\n\n  constructor() {\n    super('Tile');\n  }\n}\n\nexport default EntityTile;\n","import { Colorable, Placeable, Player, ShapeHuman } from './components';\nimport Entity from './Entity';\nimport EntityTile from './EntityTile';\n\nclass EntityPlayer extends Entity {\n  public static create(name: string = 'Player'): EntityPlayer {\n    const player = new EntityPlayer(name);\n    player.is(new Placeable(1 * EntityTile.SIZE, 1 * EntityTile.SIZE));\n    player.is(new Colorable('green'));\n    player.is(new ShapeHuman());\n    player.is(new Player());\n\n    return player;\n  }\n\n  private constructor(name: string) {\n    super(name);\n  }\n}\n\nexport default EntityPlayer;\n","import { Colorable } from './components';\nimport EntityTile from './EntityTile';\n\nclass EntityFloor extends EntityTile {\n  public static readonly SIZE: number = 32;\n\n  public static create(x: number, y: number): EntityFloor {\n    const tile = EntityTile.create(x, y);\n    tile.is(new Colorable('hotpink'));\n    return tile;\n  }\n}\n\nexport default EntityFloor;\n","import { Colorable, Solid } from './components';\nimport EntityTile from './EntityTile';\n\nclass EntityWall extends EntityTile {\n  public static readonly SIZE: number = 32;\n\n  public static create(x: number, y: number): EntityWall {\n    const tile = EntityTile.create(x, y);\n    tile.is(new Colorable('blue'));\n    tile.is(new Solid());\n    return tile;\n  }\n}\n\nexport default EntityWall;\n","import { ComponentId } from './../components';\nimport Entity from '../Entity';\nimport Canvas from '../../engine/Canvas';\nimport Graphics from '../../engine/graphics';\nimport Input from '../../engine/input';\n\nconst hasAllComponents = (a: ComponentId[], b: ComponentId[]) => (\n  JSON.stringify(a.sort()) === JSON.stringify(b.sort())\n);\n\nclass System {\n  public static for(entity: Entity): System {\n    return new System(entity);\n  }\n\n  public render(canvas: Canvas, g: Graphics): void {}\n\n  public update(input: Input, delta: number): void {}\n\n  public shouldRun(): System | null {\n    const entityComponents = this.entity.getComponentIds();\n    if (hasAllComponents(entityComponents, this.requires)) {\n      return this;\n    }\n\n    return null;\n  }\n\n  public get requires (): ComponentId[] {\n    return [];\n  }\n\n  protected constructor(\n    protected entity: Entity,\n  ) {}\n}\n\nexport default System;\n","import Canvas from '../../engine/Canvas';\nimport Graphics from '../../engine/graphics';\nimport { Colorable, Placeable, Shape, ComponentId } from '../components';\nimport Entity from '../Entity';\nimport System from './System';\n\nclass RendererSystem extends System {\n  public static for(entity: Entity): RendererSystem {\n    return new RendererSystem(entity);\n  }\n\n  public render(canvas: Canvas, g: Graphics): void {\n    const color = this.getColor();\n    const { x, y } = this.getPosition();\n    const { width, height } = this.getSizes();\n\n    g.color(color).translate(x, y).rect(0, 0, width, height);\n  }\n\n  public get requires (): ComponentId[] {\n    return ['Placeable', 'Shape'];\n  }\n\n  private getColor(): string {\n    return this.entity.get<Colorable>('Colorable')?.color || 'white';\n  }\n\n  private getPosition(): Placeable {\n    return this.entity.get<Placeable>('Placeable');\n  }\n\n  private getSizes(): Shape {\n    return this.entity.get<Shape>('Shape');\n  }\n}\n\nexport default RendererSystem;\n","import { ComponentId } from './../components';\nimport Updater from '../../engine/Updater';\nimport Input from '../../engine/input';\nimport Entity from '../Entity';\nimport System from './System';\n\nclass KeyboardSystem extends System implements Updater {\n  public static for(entity: Entity): KeyboardSystem {\n    return new KeyboardSystem(entity);\n  }\n\n  public update(input: Input, delta: number): void {\n  }\n\n  public get requires (): ComponentId[] {\n    return ['Placeable', 'Player'];\n  }\n}\n\nexport default KeyboardSystem;\n","import EntityTile from '../entities/EntityTile';\nimport { EntityFloor, EntityWall } from '../entities';\nimport World from './World';\n\nclass WorldMap {\n  public static readonly FLOOR = 0;\n  public static readonly WALL = 1;\n\n  public spawnX: number;\n  public spawnY: number;\n\n  private map: number[][];\n\n  constructor(public size: number = 128) {\n    this.reset();\n  }\n\n  public setTile(x: number, y: number, type: number) {\n    if (this.map[x] !== undefined && this.map[x][y] !== undefined) {\n      this.map[x][y] = type;\n    }\n  }\n\n  public getTile(x: number, y: number): number | null {\n    return this.map[x] && this.map[x][y];\n  }\n\n  public setSpawn(x: number, y: number): void {\n    this.spawnX = x * EntityTile.SIZE;\n    this.spawnY = y * EntityTile.SIZE;\n  }\n\n  public registerComponents(world: World): void {\n    this.map.forEach((row, x) => {\n      row.forEach((id, y) => {\n        if (id === WorldMap.WALL) {\n          world.spawn(EntityWall.create(x, y))\n          return;\n        }\n\n        world.spawn(EntityFloor.create(x, y));\n      });\n    });\n  }\n\n  public reset(): void {\n    this.map = Array(this.size).fill(0).map(\n      () => Array(this.size).fill(0).map(() => WorldMap.FLOOR)\n    );\n  }\n}\n\nexport default WorldMap;\n","import Entity, { EntityPlayer, EntityTile } from '../entities';\nimport { KeyboardSystem, RendererSystem } from '../entities/systems';\nimport { Canvas, Renderer, Updater } from '../engine';\nimport Input from '../engine/input';\nimport Graphics from '../engine/graphics';\nimport WorldGenerate from './WorldGenerate';\nimport { Placeable } from '~entities/components';\nimport WorldMap from './WorldMap';\n\nclass World implements Renderer, Updater {\n  private entities: Entity[];\n  private entitiesToDraw: Entity[];\n  private map: WorldMap;\n\n  constructor() {\n    this.entities = [];\n    this.entitiesToDraw = [];\n  }\n\n  public init(canvas: Canvas): void {\n    this.map = WorldGenerate.generate(32);\n    this.map.registerComponents(this);\n\n    const { spawnX, spawnY } = this.map;\n    this.spawn(EntityPlayer.create('Vornian'), spawnX, spawnY);\n  }\n\n  public render(canvas: Canvas, g: Graphics): void {\n    this.entitiesToDraw.forEach((entity) => {\n      RendererSystem.for(entity).render(canvas, g);\n      this.entitiesToDraw.shift();\n    });\n  }\n\n  public update(input: Input, delta: number): void {\n    this.entities.forEach((entity) => {\n      KeyboardSystem.for(entity).shouldRun()?.update(input, delta);\n\n      if (entity.isDrawable()) {\n        this.draw(entity);\n      }\n    });\n  }\n\n  public spawn(entity: Entity, x?: number, y?: number): void {\n    if (x !== undefined && y !== undefined) {\n      const position = entity.get<Placeable>('Placeable');\n      position?.set(x, y);\n    }\n\n    this.entities[entity.id] = entity;\n  }\n\n  private draw(entity: Entity): void {\n    this.entitiesToDraw.push(entity);\n  }\n}\n\nexport default World;\n","import WorldMap from './WorldMap';\n\nclass WorldGenerate {\n  public static generate(size: number = 128): WorldMap {\n    const map: WorldMap = new WorldMap(size);\n    this.generateBaseFloor(map);\n    this.findSpawnPosition(map);\n\n    return map;\n  }\n\n  private static generateBaseFloor(map: WorldMap): void {\n    for(let i=0; i < map.size; i++) {\n      for(let j=0; j < map.size; j++) {\n        const isFloor = Math.random() > 0.5;\n        const tile = isFloor ? WorldMap.FLOOR : WorldMap.WALL;\n        map.setTile(i, j, tile);\n      }\n    }\n  }\n\n  private static findSpawnPosition(map: WorldMap) {\n    map.setSpawn(1, 1);\n  }\n}\n\nexport default WorldGenerate;\n","import WebGame from './engine/WebGame';\nimport Hagokia from './Hagokia';\n\nconst canvas = document.getElementById('canvas'); \nconst webGame = new WebGame(canvas as HTMLCanvasElement);\nwebGame.init(new Hagokia());\n","import Game from './Game'\nimport Canvas from './Canvas';\nimport Graphics from './graphics';\nimport Input from './input';\n\nclass WebGame {\n  private canvas: Canvas;\n  private ctx: CanvasRenderingContext2D;\n\n  private graphics: Graphics;\n  private input: Input;\n\n  private game: Game;\n\n  constructor(canvas: HTMLCanvasElement) {\n    this.canvas = Canvas.fromHTMLCanvas(canvas);\n    this.ctx = canvas.getContext('2d');\n    this.ctx.imageSmoothingEnabled = true;\n    this.ctx.imageSmoothingQuality = 'high';\n  }\n\n  public init(game: Game): void {\n    this.game = game;\n    this.graphics = new Graphics(this.canvas, this.ctx);\n\n    this.game.init(this.canvas);\n    this.requestAnimationFrame();\n  }\n\n  private gameLoop(): void {\n    this.game.update(this.input, 1.0);\n\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.game.render(this.canvas, this.graphics);\n\n    this.requestAnimationFrame();\n  }\n\n  private requestAnimationFrame(): void {\n    window.requestAnimationFrame(this.gameLoop.bind(this));\n  }\n}\n\nexport default WebGame;\n","import Canvas from './engine/Canvas';\nimport Game from './engine/Game';\nimport Graphics from './engine/graphics';\nimport Input from './engine/input';\nimport World from './world';\n\nclass Hagokia implements Game {\n  private r: number = 0;\n\n  private world: World;\n\n  constructor() {\n    this.world = new World();\n  }\n\n  init(canvas: Canvas): void {\n    console.log('Game init.');\n    this.world.init(canvas);\n  }\n\n  render(canvas: Canvas, g: Graphics): void {\n    g.color('red').translate(64, 64).rotate(this.r).rect(-32, -32, 64, 64);\n    g.color('yellow').rect(64, 64, 64, 64);\n\n    this.world.render(canvas, g);\n  }\n\n  update(input: Input, delta: number): void {\n    this.r += 0.05 * delta;\n\n    this.world.update(input, delta);\n  }\n}\n\nexport default Hagokia;\n"],"names":["$546701f85e14d9de58b49f17977dbafe$export$default","width","height","htmlCanvas","canvas","onWindowResize","window","innerWidth","innerHeight","addEventListener","bind","this","constructor","$94aab8f2e4b993907dcded5749710bb3$export$default","ctx","save","restore","translate","x","y","rotate","deg","color","fillStyle","rect","fillRect","resetTransform","$afb7bd5bdc83073c5a824ff443ec7526$export$default","name","id","sequence","components","is","component","key","getKey","isNot","get","getComponentIds","Object","keys","isDrawable","Boolean","values","find","$98c03d64ce00a231b63a1ac6884bcf5e$export$default","$1f302363ba0701e0a5c8cf8e4eb553a2$export$default","super","set","$58d111a5e9b34cdde4428027c04eb0a8$export$default","$7878ce8de8df49fa125ed0fe6d22beb2$export$default","$32e7dd13a75f28548f81f6803b3a3a30$export$default","$df5346b90ca4519f134aaa61c2a639a0$export$default","$02447c7afa2ee3dbd01b1fc9275aa7df$export$default","$bb8f4303bfce493a624c29b5fbc34789$export$default","$c80c9301aaf5c5d9e889941aefc9e1d4$export$default","$16d88d33cc2be75f9e901e165847c4f9$export$default","tile","SIZE","$2670e351154e299705e0b8760bb1b2c7$export$default","player","$5c293f3ec1964db8fdf1020969007b3b$export$default","create","$a23986a5521a12e48e39e646c037ca3c$export$default","$739fdd702465aa160fdeadf89b52dfa8$export$default","entity","render","g","update","input","delta","shouldRun","entityComponents","a","b","requires","JSON","stringify","sort","$c830817a4e2510e2b61f402ca4f355bc$export$default","getColor","getPosition","getSizes","$55687d21aa8bbbd04aaccc016f11b8ef$export$default","$c7baf97dca1f6620504a51ab300f5a8d$export$default","size","reset","setTile","type","undefined","map","getTile","setSpawn","spawnX","spawnY","registerComponents","world","forEach","row","WALL","spawn","Array","fill","FLOOR","$91f362c2855207d73299a63865b0bdc5$export$default","entities","entitiesToDraw","init","generateBaseFloor","findSpawnPosition","i","j","Math","random","isFloor","generate","for","shift","draw","push","$8d10e2b035c8e6d9dff8f94d4db9d773$var$canvas","document","getElementById","$8d10e2b035c8e6d9dff8f94d4db9d773$var$webGame","fromHTMLCanvas","getContext","imageSmoothingEnabled","imageSmoothingQuality","game","graphics","requestAnimationFrame","gameLoop","clearRect","r","console","log"],"version":3,"file":"index.403423b5.js.map"}