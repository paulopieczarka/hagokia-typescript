{"mappings":"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","sources":["./src/game/engine/Canvas.ts","./src/game/engine/graphics/Graphics.ts","./src/game/entities/Entity.ts","./src/game/entities/components/Component.ts","./src/game/entities/components/Placeable.ts","./src/game/entities/components/Colorable.ts","./src/game/Constants.ts","./src/game/entities/components/Drawable.ts","./src/game/entities/components/Shape.ts","./src/game/entities/components/ShapeHuman.ts","./src/game/entities/components/Player.ts","./src/game/entities/components/Tile.ts","./src/game/entities/components/Solid.ts","./src/game/entities/EntityPlayer.ts","./src/game/entities/EntityTile.ts","./src/game/entities/EntityFloor.ts","./src/game/entities/EntityWall.ts","./src/game/entities/systems/System.ts","./src/game/entities/systems/RendererSystem.ts","./src/game/entities/systems/KeyboardSystem.ts","./src/game/world/WorldRoom.ts","./src/game/world/WorldMap.ts","./src/game/world/World.ts","./src/game/world/WorldGenerate.ts","./src/game/index.ts","./src/game/engine/WebGame.ts","./src/game/Hagokia.ts"],"sourcesContent":["class Canvas {\n  public width: number = 800;\n  public height: number = 600;\n\n  public static fromHTMLCanvas(htmlCanvas: HTMLCanvasElement): Canvas {\n    const { width, height } = htmlCanvas;\n    const canvas = new Canvas(width, height);\n\n    const onWindowResize = (): void => {\n      htmlCanvas.width = window.innerWidth;\n      htmlCanvas.height = window.innerHeight;\n      canvas.onWindowResize();\n    };\n\n    window.addEventListener('resize', onWindowResize.bind(this));\n    onWindowResize();\n\n    return canvas;\n  }\n\n  private constructor(width: number, height: number) {\n    this.width = width;\n    this.height = height;\n  }\n\n  protected onWindowResize(): void {\n    this.width = window.innerWidth;\n    this.height = window.innerHeight;\n  }\n}\n\nexport default Canvas;\n","import Canvas from '../Canvas';\n\nclass Graphics {\n  constructor(\n    private canvas: Canvas,\n    private ctx: CanvasRenderingContext2D,\n  ) {}\n\n  public save(): Graphics {\n    this.ctx.save();\n    return this;\n  }\n\n  public restore(): Graphics {\n    this.ctx.restore();\n    return this;\n  }\n\n  public translate(x: number, y: number): Graphics {\n    this.ctx.translate(x, y);\n    return this;\n  }\n\n  public rotate(deg: number): Graphics {\n    this.ctx.rotate(deg);\n    return this;\n  }\n\n  public color(color: string): Graphics {\n    this.ctx.fillStyle = color;\n    return this;\n  }\n\n  public rect(x: number, y: number, width: number, height: number): Graphics {\n    this.ctx.fillRect(x, y, width, height);\n    this.ctx.resetTransform();\n    return this;\n  }\n}\n\nexport default Graphics;\n","import Component, { ComponentId } from './components';\n\nclass Entity {\n  public readonly id: number;\n\n  private static sequence: number = 0;\n  private components: Component[];\n\n  constructor(public name: string = 'Entity') {\n    this.id = Entity.sequence++;\n    this.components = [];\n  }\n\n  public is(component: Component): void {\n    const key = this.getKey(component);\n    this.components[key] = component;\n  }\n\n  public isNot(component: Component) {\n    const key = this.getKey(component);\n    delete this.components[key];\n  }\n\n  public get<T extends Component>(name: ComponentId): T | null {\n    return this.components[name];\n  }\n\n  public getComponentIds(): ComponentId[] {\n    return Object.keys(this.components) as ComponentId[];\n  }\n\n  public isDrawable(): boolean {\n    return Boolean(\n      Object.values(this.components).find(\n        (component: Component) => 'isDrawable' in component\n      )\n    );\n  }\n\n  private getKey(component: Component): string {\n    return component.id;\n  }\n}\n\nexport default Entity;\n","class Component {\n  constructor(public readonly id: string) {}\n}\n\nexport default Component;\n","import Component from './Component';\n\nclass Placeable extends Component {\n  constructor(\n    public x: number = 0,\n    public y: number = 0,\n  ) {\n    super('Placeable');\n  }\n\n  public set(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n}\n\nexport default Placeable;","import Component from './Component';\n\nclass Colorable extends Component {\n  constructor(\n    public color: string = 'hotpink',\n  ) {\n    super('Colorable');\n  }\n}\n\nexport default Colorable;\n","class Constants {\n  public static readonly TILE_SIZE: number = 32;\n}\n\nexport default Constants;\n","import Component from './Component';\n\nclass Drawable extends Component {\n  public isDrawable: boolean = true;\n}\n\nexport default Drawable;\n","import Constants from '../../Constants';\nimport Drawable from './Drawable';\n\nclass Shape extends Drawable {\n  public width: number;\n  public height: number;\n\n  constructor(width: number, height: number) {\n    super('Shape');\n    this.width = width * Constants.TILE_SIZE;\n    this.height = height * Constants.TILE_SIZE;\n  }\n}\n\nexport default Shape;\n","import Shape from './Shape';\n\nclass ShapeHuman extends Shape {\n  constructor() {\n    super(1, 1);\n  }\n}\n\nexport default ShapeHuman;\n","import Component from './Component';\n\nclass Player extends Component {\n  constructor() {\n    super('Player');\n  }\n}\n\nexport default Player;\n","import Drawable from './Drawable';\n\nclass Tile extends Drawable {\n  constructor() {\n    super('Tile');\n  }\n}\n\nexport default Tile;\n\n\n\n","import Drawable from './Drawable';\n\nclass Solid extends Drawable {\n  constructor() {\n    super('Solid');\n  }\n}\n\nexport default Solid;\n\n\n\n","import { Colorable, Placeable, Player, ShapeHuman } from './components';\nimport Entity from './Entity';\n\nclass EntityPlayer extends Entity {\n  public static create(name: string = 'Player'): EntityPlayer {\n    const player = new EntityPlayer(name);\n    player.is(new Placeable(1, 1));\n    player.is(new Colorable('green'));\n    player.is(new ShapeHuman());\n    player.is(new Player());\n\n    return player;\n  }\n\n  private constructor(name: string) {\n    super(name);\n  }\n}\n\nexport default EntityPlayer;\n","import { Placeable, Shape, Tile } from './components';\nimport Entity from './Entity';\n\nclass EntityTile extends Entity {\n  public static create(x: number, y: number): EntityTile {\n    const tile = new EntityTile();\n    tile.is(new Tile());\n    tile.is(new Shape(1, 1));\n    tile.is(new Placeable(x, y));\n\n    return tile;\n  }\n\n  constructor() {\n    super('Tile');\n  }\n}\n\nexport default EntityTile;\n","import { Colorable } from './components';\nimport EntityTile from './EntityTile';\n\nclass EntityFloor extends EntityTile {\n  public static readonly SIZE: number = 32;\n\n  public static create(x: number, y: number): EntityFloor {\n    const tile = EntityTile.create(x, y);\n    tile.is(new Colorable('hotpink'));\n    return tile;\n  }\n}\n\nexport default EntityFloor;\n","import { Colorable, Solid } from './components';\nimport EntityTile from './EntityTile';\n\nclass EntityWall extends EntityTile {\n  public static readonly SIZE: number = 32;\n\n  public static create(x: number, y: number): EntityWall {\n    const tile = EntityTile.create(x, y);\n    tile.is(new Colorable('blue'));\n    tile.is(new Solid());\n    return tile;\n  }\n}\n\nexport default EntityWall;\n","import { ComponentId } from './../components';\nimport Entity from '../Entity';\nimport Canvas from '../../engine/Canvas';\nimport Graphics from '../../engine/graphics';\nimport Input from '../../engine/input';\n\nconst hasAllComponents = (a: ComponentId[], b: ComponentId[]) => (\n  JSON.stringify(a.sort()) === JSON.stringify(b.sort())\n);\n\nclass System {\n  public static for(entity: Entity): System {\n    return new System(entity);\n  }\n\n  public render(canvas: Canvas, g: Graphics): void {}\n\n  public update(input: Input, delta: number): void {}\n\n  public shouldRun(): System | null {\n    const entityComponents = this.entity.getComponentIds();\n    if (hasAllComponents(entityComponents, this.requires)) {\n      return this;\n    }\n\n    return null;\n  }\n\n  public get requires (): ComponentId[] {\n    return [];\n  }\n\n  protected constructor(\n    protected entity: Entity,\n  ) {}\n}\n\nexport default System;\n","import Constants from '../../Constants';\nimport Canvas from '../../engine/Canvas';\nimport Graphics from '../../engine/graphics';\nimport { Colorable, Placeable, Shape, ComponentId } from '../components';\nimport Entity from '../Entity';\nimport System from './System';\n\nclass RendererSystem extends System {\n  public static for(entity: Entity): RendererSystem {\n    return new RendererSystem(entity);\n  }\n\n  public render(canvas: Canvas, g: Graphics): void {\n    const color = this.getColor();\n    const { x, y } = this.getPosition();\n    const { width, height } = this.getSizes();\n\n    const renderPosX = x * Constants.TILE_SIZE;\n    const renderPosY = y * Constants.TILE_SIZE;\n    g.color(color).translate(renderPosX, renderPosY).rect(0, 0, width, height);\n  }\n\n  public get requires (): ComponentId[] {\n    return ['Placeable', 'Shape'];\n  }\n\n  private getColor(): string {\n    return this.entity.get<Colorable>('Colorable')?.color || 'white';\n  }\n\n  private getPosition(): Placeable {\n    return this.entity.get<Placeable>('Placeable');\n  }\n\n  private getSizes(): Shape {\n    return this.entity.get<Shape>('Shape');\n  }\n}\n\nexport default RendererSystem;\n","import { ComponentId } from './../components';\nimport Input from '../../engine/input';\nimport Entity from '../Entity';\nimport System from './System';\n\nclass KeyboardSystem extends System {\n  public static for(entity: Entity): KeyboardSystem {\n    return new KeyboardSystem(entity);\n  }\n\n  public update(input: Input, delta: number): void {\n  }\n\n  public get requires (): ComponentId[] {\n    return ['Placeable', 'Movable', 'Player'];\n  }\n}\n\nexport default KeyboardSystem;\n","export interface Room {\n  doors: {\n    top: boolean,\n    bottom: boolean,\n    left: boolean,\n    right: boolean,\n  },\n  tiles: number[][];\n};\n\nclass WorldRoom {\n  public static getRandomRoom(where?: 'top' | 'bottom' | 'left' | 'right'): Room {\n    const possibleRooms = WorldRoom[where || 'rooms'];\n    console.log(where, possibleRooms)\n    const length = possibleRooms.length - 1;\n    const index = Math.round(Math.random() * length);\n    return possibleRooms[index];\n  }\n\n  public static get top(): Room[] {\n    return [WorldRoom.TOP, WorldRoom.TOP_LEFT, WorldRoom.TOP_RIGHT, WorldRoom.TOP_BOTTOM];\n  }\n\n  public static get bottom(): Room[] {\n    return [WorldRoom.BOTTOM, WorldRoom.BOTTOM_LEFT, WorldRoom.BOTTOM_RIGHT, WorldRoom.TOP_BOTTOM];\n  }\n\n  public static get left(): Room[] {\n    return [WorldRoom.LEFT, WorldRoom.TOP_LEFT, WorldRoom.BOTTOM_LEFT, WorldRoom.LEFT_RIGHT];\n  }\n\n  public static get right(): Room[] {\n    return [WorldRoom.RIGHT, WorldRoom.TOP_RIGHT, WorldRoom.BOTTOM_RIGHT, WorldRoom.LEFT_RIGHT];\n  }\n\n  public static get rooms(): Room[] {\n    return [\n      WorldRoom.CENTER,\n      WorldRoom.LEFT,\n      WorldRoom.RIGHT,\n      WorldRoom.TOP,\n      WorldRoom.BOTTOM,\n      WorldRoom.TOP_LEFT,\n      WorldRoom.TOP_RIGHT,\n      WorldRoom.TOP_BOTTOM,\n      WorldRoom.BOTTOM_LEFT,\n      WorldRoom.BOTTOM_RIGHT,\n      WorldRoom.LEFT_RIGHT,\n    ];\n  }\n\n  public static get CENTER(): Room {\n    return {\n      doors: {\n        top: true,\n        bottom: true,\n        left: true,\n        right: true,\n      },\n      tiles: [\n        [1, 1, 1, 1, 0, 0, 1, 1, 1, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 1, 1, 1, 0, 0, 1, 1, 1, 1],\n      ],\n    };\n  }\n\n  public static get LEFT(): Room {\n    return {\n      doors: {\n        top: false,\n        bottom: false,\n        left: true,\n        right: false,\n      },\n      tiles: [\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n      ],\n    };\n  }\n\n  public static get RIGHT(): Room {\n    return {\n      doors: {\n        top: false,\n        bottom: false,\n        left: false,\n        right: true,\n      },\n      tiles: [\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n      ],\n    };\n  }\n\n  public static get TOP(): Room {\n    return {\n      doors: {\n        top: true,\n        bottom: false,\n        left: false,\n        right: false,\n      },\n      tiles: [\n        [1, 1, 1, 1, 0, 0, 1, 1, 1, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n      ],\n    };\n  }\n\n  public static get BOTTOM(): Room {\n    return {\n      doors: {\n        top: false,\n        bottom: true,\n        left: false,\n        right: false,\n      },\n      tiles: [\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 1, 1, 1, 0, 0, 1, 1, 1, 1],\n      ],\n    };\n  }\n\n  public static get TOP_LEFT(): Room {\n    return {\n      doors: {\n        top: true,\n        bottom: false,\n        left: true,\n        right: false,\n      },\n      tiles: [\n        [1, 1, 1, 1, 0, 0, 1, 1, 1, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n      ],\n    };\n  }\n\n  public static get TOP_RIGHT(): Room {\n    return {\n      doors: {\n        top: true,\n        bottom: false,\n        left: false,\n        right: true,\n      },\n      tiles: [\n        [1, 1, 1, 1, 0, 0, 1, 1, 1, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n      ],\n    };\n  }\n\n  public static get TOP_BOTTOM(): Room {\n    return {\n      doors: {\n        top: true,\n        bottom: true,\n        left: false,\n        right: false,\n      },\n      tiles: [\n        [1, 1, 1, 1, 0, 0, 1, 1, 1, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 1, 1, 1, 0, 0, 1, 1, 1, 1],\n      ],\n    };\n  }\n\n  public static get BOTTOM_LEFT(): Room {\n    return {\n      doors: {\n        top: false,\n        bottom: true,\n        left: true,\n        right: false,\n      },\n      tiles: [\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 1, 1, 1, 0, 0, 1, 1, 1, 1],\n      ],\n    };\n  }\n\n  public static get BOTTOM_RIGHT(): Room {\n    return {\n      doors: {\n        top: false,\n        bottom: true,\n        left: false,\n        right: true,\n      },\n      tiles: [\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 1, 1, 1, 0, 0, 1, 1, 1, 1],\n      ],\n    };\n  }\n\n  public static get LEFT_RIGHT(): Room {\n    return {\n      doors: {\n        top: false,\n        bottom: false,\n        left: true,\n        right: true,\n      },\n      tiles: [\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n      ],\n    };\n  }\n}\n\nexport default WorldRoom;\n","import { EntityFloor, EntityWall } from '../entities';\nimport Constants from '../Constants';\nimport World from './World';\n\nclass WorldMap {\n  public static readonly NONE = -1;\n  public static readonly FLOOR = 0;\n  public static readonly WALL = 1;\n\n  public spawnX: number;\n  public spawnY: number;\n\n  private map: number[][];\n\n  constructor(public size: number = 128) {\n    this.reset();\n  }\n\n  public setTile(x: number, y: number, type: number) {\n    if (this.map[x] !== undefined && this.map[x][y] !== undefined) {\n      this.map[x][y] = type;\n    }\n  }\n\n  public getTile(x: number, y: number): number | null {\n    return this.map[x] && this.map[x][y];\n  }\n\n  public setSpawn(x: number, y: number): void {\n    this.spawnX = x;\n    this.spawnY = y;\n  }\n\n  public registerComponents(world: World): void {\n    this.map.forEach((row, x) => {\n      row.forEach((id, y) => {\n        if (id === WorldMap.WALL) {\n          world.spawn(EntityWall.create(x, y))\n          return;\n        }\n\n        if (id === WorldMap.FLOOR) {\n          world.spawn(EntityFloor.create(x, y));\n        }\n      });\n    });\n  }\n\n  public reset(): void {\n    this.map = Array(this.size).fill(0).map(\n      () => Array(this.size).fill(0).map(() => WorldMap.NONE)\n    );\n  }\n}\n\nexport default WorldMap;\n","import Entity, { EntityPlayer, EntityTile } from '../entities';\nimport { KeyboardSystem, RendererSystem } from '../entities/systems';\nimport { Canvas, Renderer, Updater } from '../engine';\nimport Input from '../engine/input';\nimport Graphics from '../engine/graphics';\nimport WorldGenerate from './WorldGenerate';\nimport { Placeable } from '~entities/components';\nimport WorldMap from './WorldMap';\n\nclass World implements Renderer, Updater {\n  private entities: Entity[];\n  private entitiesToDraw: Entity[];\n  private map: WorldMap;\n\n  constructor() {\n    this.entities = [];\n    this.entitiesToDraw = [];\n  }\n\n  public init(canvas: Canvas): void {\n    this.map = WorldGenerate.generate(120);\n    this.map.registerComponents(this);\n\n    const { spawnX, spawnY } = this.map;\n    this.spawn(EntityPlayer.create('Vornian'), spawnX, spawnY);\n  }\n\n  public render(canvas: Canvas, g: Graphics): void {\n    this.entitiesToDraw.forEach((entity) => {\n      RendererSystem.for(entity).render(canvas, g);\n    });\n\n    this.entitiesToDraw = [];\n  }\n\n  public update(input: Input, delta: number): void {\n    this.entities.forEach((entity) => {\n      KeyboardSystem.for(entity).shouldRun()?.update(input, delta);\n\n      if (entity.isDrawable()) {\n        this.draw(entity);\n      }\n    });\n  }\n\n  public spawn(entity: Entity, x?: number, y?: number): void {\n    if (x !== undefined && y !== undefined) {\n      const position = entity.get<Placeable>('Placeable');\n      position?.set(x, y);\n    }\n\n    this.entities[entity.id] = entity;\n  }\n\n  private draw(entity: Entity): void {\n    this.entitiesToDraw.push(entity);\n  }\n}\n\nexport default World;\n","import WorldRoom, { Room } from './WorldRoom';\nimport WorldMap from './WorldMap';\n\nclass WorldGenerate {\n  public static generate(size: number = 128): WorldMap {\n    const map: WorldMap = new WorldMap(size);\n    this.generateRooms(map);\n\n    return map;\n  }\n\n  private static generateRooms(map: WorldMap): void {\n    const rooms: Room[][] = Array(2).fill(0).map(() => Array(2));\n    \n    const spawnPoints = [\n      { x: Math.round(map.size/2) - 5, y: Math.round(map.size/2) - 5, direction: null },\n    ];\n    const roomPoints = [Object.values(spawnPoints[0]).join(',')];\n\n    map.setSpawn(spawnPoints[0].x + 5, spawnPoints[0].y + 5);\n\n    while (spawnPoints.length > 0) {\n      const { x, y, direction } = spawnPoints.shift();\n\n      if (roomPoints.includes([x, y].join(','))) {\n        continue;\n      }\n\n      const room = direction ? WorldRoom.getRandomRoom(direction) : WorldRoom.CENTER;\n      this.placeRoom(x, y, room, map);\n      roomPoints.push([x, y].join(','));\n\n      if (room.doors.top) {\n        spawnPoints.push({ x, y: y - 9, direction: 'bottom' });\n      }\n\n      if (room.doors.bottom) {\n        spawnPoints.push({ x, y: y + 9, direction: 'top' });\n      }\n\n      if (room.doors.left) {\n        spawnPoints.push({ x: x - 9, y, direction: 'right' });\n      }\n\n      if (room.doors.right) {\n        spawnPoints.push({ x: x + 9, y, direction: 'left' });\n      }\n    }\n  }\n\n  private static placeRoom(x: number, y: number, room: Room, map: WorldMap) {\n    for(let i=0; i < 10; i++) {\n      for(let j=0; j < 10; j++) {\n        const isFloor = room.tiles[j][i] === 0;\n        const tile = isFloor ? WorldMap.FLOOR : WorldMap.WALL;\n        map.setTile(x + i, y + j, tile);\n      }\n    }\n  }\n}\n\nexport default WorldGenerate;\n","import WebGame from './engine/WebGame';\nimport Hagokia from './Hagokia';\n\nconst canvas = document.getElementById('canvas'); \nconst webGame = new WebGame(canvas as HTMLCanvasElement);\nwebGame.init(new Hagokia());\n","import Game from './Game'\nimport Canvas from './Canvas';\nimport Graphics from './graphics';\nimport Input from './input';\n\nclass WebGame {\n  private canvas: Canvas;\n  private ctx: CanvasRenderingContext2D;\n\n  private graphics: Graphics;\n  private input: Input;\n\n  private game: Game;\n\n  constructor(canvas: HTMLCanvasElement) {\n    this.canvas = Canvas.fromHTMLCanvas(canvas);\n    this.ctx = canvas.getContext('2d');\n    this.ctx.imageSmoothingEnabled = true;\n    this.ctx.imageSmoothingQuality = 'high';\n  }\n\n  public init(game: Game): void {\n    this.game = game;\n    this.graphics = new Graphics(this.canvas, this.ctx);\n\n    this.game.init(this.canvas);\n    this.requestAnimationFrame();\n  }\n\n  private gameLoop(): void {\n    this.game.update(this.input, 1.0);\n\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.game.render(this.canvas, this.graphics);\n\n    this.requestAnimationFrame();\n  }\n\n  private requestAnimationFrame(): void {\n    window.requestAnimationFrame(this.gameLoop.bind(this));\n  }\n}\n\nexport default WebGame;\n","import Canvas from './engine/Canvas';\nimport Game from './engine/Game';\nimport Graphics from './engine/graphics';\nimport Input from './engine/input';\nimport World from './world';\n\nclass Hagokia implements Game {\n  private world: World;\n\n  constructor() {\n    this.world = new World();\n  }\n\n  init(canvas: Canvas): void {\n    console.log('Game init.');\n    this.world.init(canvas);\n  }\n\n  render(canvas: Canvas, g: Graphics): void {\n    this.world.render(canvas, g);\n  }\n\n  update(input: Input, delta: number): void {\n    this.world.update(input, delta);\n  }\n}\n\nexport default Hagokia;\n"],"names":["$546701f85e14d9de58b49f17977dbafe$export$default","width","height","htmlCanvas","canvas","onWindowResize","window","innerWidth","innerHeight","addEventListener","bind","this","constructor","$94aab8f2e4b993907dcded5749710bb3$export$default","ctx","save","restore","translate","x","y","rotate","deg","color","fillStyle","rect","fillRect","resetTransform","$afb7bd5bdc83073c5a824ff443ec7526$export$default","name","id","sequence","components","is","component","key","getKey","isNot","get","getComponentIds","Object","keys","isDrawable","Boolean","values","find","$98c03d64ce00a231b63a1ac6884bcf5e$export$default","$1f302363ba0701e0a5c8cf8e4eb553a2$export$default","super","set","$58d111a5e9b34cdde4428027c04eb0a8$export$default","$b74a9ba2b83f33f0a0d1b71b22617aa4$export$default","$7878ce8de8df49fa125ed0fe6d22beb2$export$default","$32e7dd13a75f28548f81f6803b3a3a30$export$default","TILE_SIZE","$df5346b90ca4519f134aaa61c2a639a0$export$default","$02447c7afa2ee3dbd01b1fc9275aa7df$export$default","$bb8f4303bfce493a624c29b5fbc34789$export$default","$c80c9301aaf5c5d9e889941aefc9e1d4$export$default","$2670e351154e299705e0b8760bb1b2c7$export$default","player","$16d88d33cc2be75f9e901e165847c4f9$export$default","tile","$5c293f3ec1964db8fdf1020969007b3b$export$default","create","$a23986a5521a12e48e39e646c037ca3c$export$default","$739fdd702465aa160fdeadf89b52dfa8$export$default","entity","render","g","update","input","delta","shouldRun","entityComponents","a","b","requires","JSON","stringify","sort","$c830817a4e2510e2b61f402ca4f355bc$export$default","getColor","getPosition","getSizes","renderPosX","renderPosY","$55687d21aa8bbbd04aaccc016f11b8ef$export$default","$81b759fafc70f1773113da92435ee4fe$export$default","where","possibleRooms","console","log","length","Math","round","random","TOP","TOP_LEFT","TOP_RIGHT","TOP_BOTTOM","BOTTOM","BOTTOM_LEFT","BOTTOM_RIGHT","LEFT","LEFT_RIGHT","RIGHT","CENTER","doors","top","bottom","left","right","tiles","$c7baf97dca1f6620504a51ab300f5a8d$export$default","size","reset","setTile","type","undefined","map","getTile","setSpawn","spawnX","spawnY","registerComponents","world","forEach","row","WALL","FLOOR","spawn","Array","fill","NONE","$91f362c2855207d73299a63865b0bdc5$export$default","entities","entitiesToDraw","init","generateRooms","spawnPoints","direction","roomPoints","join","shift","includes","room","getRandomRoom","placeRoom","push","i","j","isFloor","generate","for","draw","$8d10e2b035c8e6d9dff8f94d4db9d773$var$canvas","document","getElementById","$8d10e2b035c8e6d9dff8f94d4db9d773$var$webGame","fromHTMLCanvas","getContext","imageSmoothingEnabled","imageSmoothingQuality","game","graphics","requestAnimationFrame","gameLoop","clearRect"],"version":3,"file":"index.c4de0de3.js.map"}