{"mappings":"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","sources":["./src/game/engine/Canvas.ts","./src/game/engine/graphics/Graphics.ts","./src/game/engine/input/Keyboard.ts","./src/game/engine/input/Input.ts","./src/game/Constants.ts","./src/game/engine/Camera.ts","./src/game/entities/Entity.ts","./src/game/entities/components/Component.ts","./src/game/entities/components/Placeable.ts","./src/game/entities/components/Colorable.ts","./src/game/entities/components/Drawable.ts","./src/game/entities/components/Shape.ts","./src/game/entities/components/ShapeHuman.ts","./src/game/entities/components/Player.ts","./src/game/entities/components/Tile.ts","./src/game/entities/components/Solid.ts","./src/game/entities/components/Movable.ts","./src/game/entities/EntityPlayer.ts","./src/game/entities/EntityTile.ts","./src/game/entities/EntityFloor.ts","./src/game/entities/EntityWall.ts","./src/game/entities/systems/System.ts","./src/game/entities/systems/RendererSystem.ts","./src/game/entities/systems/KeyboardSystem.ts","./src/game/entities/systems/MovementSystem.ts","./src/game/world/WorldRoom.ts","./src/game/world/WorldMap.ts","./src/game/world/World.ts","./src/game/world/WorldGenerate.ts","./src/game/index.ts","./src/game/engine/WebGame.ts","./src/game/Hagokia.ts"],"sourcesContent":["import Camera from './Camera';\n\nclass Canvas {\n  public width: number = 800;\n  public height: number = 600;\n  public camera: Camera;\n\n  public static fromHTMLCanvas(htmlCanvas: HTMLCanvasElement): Canvas {\n    const { width, height } = htmlCanvas;\n    const canvas = new Canvas(width, height);\n\n    const onWindowResize = (): void => {\n      htmlCanvas.width = window.innerWidth;\n      htmlCanvas.height = window.innerHeight;\n      canvas.onWindowResize();\n    };\n\n    window.addEventListener('resize', onWindowResize.bind(this));\n    onWindowResize();\n\n    return canvas;\n  }\n\n  public useCamera(camera: Camera): Canvas {\n    this.camera = camera;\n    return this;\n  }\n\n  private constructor(width: number, height: number) {\n    this.width = width;\n    this.height = height;\n  }\n\n  protected onWindowResize(): void {\n    this.width = window.innerWidth;\n    this.height = window.innerHeight;\n  }\n}\n\nexport default Canvas;\n","import Canvas from '../Canvas';\n\nclass Graphics {\n  constructor(\n    private canvas: Canvas,\n    private ctx: CanvasRenderingContext2D,\n  ) {}\n\n  public save(): Graphics {\n    this.ctx.save();\n    return this;\n  }\n\n  public restore(): Graphics {\n    this.ctx.restore();\n    return this;\n  }\n\n  public translate(x: number, y: number): Graphics {\n    this.ctx.translate(x, y);\n    return this;\n  }\n\n  public rotate(deg: number): Graphics {\n    this.ctx.rotate(deg);\n    return this;\n  }\n\n  public color(color: string): Graphics {\n    this.ctx.fillStyle = color;\n    return this;\n  }\n\n  public rect(x: number, y: number, width: number, height: number): Graphics {\n    this.ctx.fillRect(x, y, width, height);\n    this.ctx.resetTransform();\n    return this;\n  }\n}\n\nexport default Graphics;\n","class Keyboard {\n  public static readonly NONE = 0;\n  public static readonly UP = 1;\n  public static readonly DOWN = 2;\n  public static readonly PRESSED = 3;\n\n  constructor(public states: number[] = []) {\n    this.createEventsListeners();\n  }\n\n  public pool(): void {\n    Object.keys(this.states).forEach((key) => {\n      this.states[key] = this.findNextState(key);\n    });\n  }\n\n  private createEventsListeners(): void {\n    window.addEventListener('keydown', this.onKeyDown.bind(this));\n    window.addEventListener('keyup', this.onKeyUp.bind(this));\n  }\n\n  private onKeyDown({ key }: KeyboardEvent): void {\n    if (this.states[key] === Keyboard.DOWN) {\n      return;\n    }\n\n    this.states[key] = Keyboard.PRESSED;\n  }\n\n  private onKeyUp({ key }: KeyboardEvent): void {\n    this.states[key] = Keyboard.UP;\n  }\n\n  private findNextState(key: string): number {\n    switch (this.states[key]) {\n      case Keyboard.UP:\n        return Keyboard.NONE;\n      case Keyboard.PRESSED:\n      case Keyboard.DOWN:\n        return Keyboard.DOWN;\n      default:\n        return Keyboard.PRESSED;\n    }\n  }\n}\n\nexport default Keyboard;\n","import Keyboard from './Keyboard';\n\nclass Input {\n  public keyboard: Keyboard;\n\n  constructor() {\n    this.keyboard = new Keyboard();\n    console.log('Inputs init.')\n  }\n\n  public isKeyDown(key: string): boolean {\n    return false;\n  }\n\n  public isKeyUp(key: string): boolean {\n    return false;\n  }\n\n  public isKeyPressed(key: string): boolean {\n    return this.keyboard.states[key] === Keyboard.PRESSED;\n  }\n}\n\nexport default Input;\n","class Constants {\n  public static readonly TILE_SIZE: number = 32;\n}\n\nexport default Constants;\n","import { Canvas } from '~engine';\nimport { Placeable } from '~entities/components';\nimport Entity from '../entities';\nimport { Updater } from '../engine';\nimport Constants from '../Constants';\nimport Input from './input';\n\nclass Camera implements Updater {\n  private target: Entity;\n\n  constructor(\n    public x: number = 0,\n    public y: number = 0,\n  ) {}\n\n  public follow(entity: Entity): void {\n    this.target = entity;\n  }\n\n  public update(input: Input, delta: number, canvas: Canvas): void {\n    this.centerTargetIfExists(canvas);\n  }\n\n  private centerTargetIfExists(canvas: Canvas): void {\n    if (!this.target) { return; }\n\n    const { x, y } = this.target.get<Placeable>('Placeable');\n    this.x = -x * Constants.TILE_SIZE + canvas.width/2;\n    this.y = -y * Constants.TILE_SIZE + canvas.height/2;\n  }\n}\n\nexport default Camera;\n","import Component, { ComponentId } from './components';\n\nclass Entity {\n  public readonly id: number;\n\n  private static sequence: number = 0;\n  private components: Component[];\n\n  constructor(public name: string = 'Entity') {\n    this.id = Entity.sequence++;\n    this.components = [];\n  }\n\n  public is(component: Component): void {\n    const key = this.getKey(component);\n    this.components[key] = component;\n  }\n\n  public isNot(component: Component) {\n    const key = this.getKey(component);\n    delete this.components[key];\n  }\n\n  public get<T extends Component>(name: ComponentId): T | null {\n    return this.components[name];\n  }\n\n  public getComponentIds(): ComponentId[] {\n    return Object.keys(this.components) as ComponentId[];\n  }\n\n  public isDrawable(): boolean {\n    return Boolean(\n      Object.values(this.components).find(\n        (component: Component) => 'isDrawable' in component\n      )\n    );\n  }\n\n  private getKey(component: Component): string {\n    return component.id;\n  }\n}\n\nexport default Entity;\n","class Component {\n  constructor(public readonly id: string) {}\n}\n\nexport default Component;\n","import Component from './Component';\n\nclass Placeable extends Component {\n  constructor(\n    public x: number = 0,\n    public y: number = 0,\n  ) {\n    super('Placeable');\n  }\n\n  public set(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n}\n\nexport default Placeable;","import Component from './Component';\n\nclass Colorable extends Component {\n  constructor(\n    public color: string = 'hotpink',\n  ) {\n    super('Colorable');\n  }\n}\n\nexport default Colorable;\n","import Component from './Component';\n\nclass Drawable extends Component {\n  public isDrawable: boolean = true;\n}\n\nexport default Drawable;\n","import Constants from '../../Constants';\nimport Drawable from './Drawable';\n\nclass Shape extends Drawable {\n  public width: number;\n  public height: number;\n\n  constructor(width: number, height: number) {\n    super('Shape');\n    this.width = width * Constants.TILE_SIZE;\n    this.height = height * Constants.TILE_SIZE;\n  }\n}\n\nexport default Shape;\n","import Shape from './Shape';\n\nclass ShapeHuman extends Shape {\n  constructor() {\n    super(1, 1);\n  }\n}\n\nexport default ShapeHuman;\n","import Component from './Component';\n\nclass Player extends Component {\n  constructor() {\n    super('Player');\n  }\n}\n\nexport default Player;\n","import Drawable from './Drawable';\n\nclass Tile extends Drawable {\n  constructor() {\n    super('Tile');\n  }\n}\n\nexport default Tile;\n\n\n\n","import Drawable from './Drawable';\n\nclass Solid extends Drawable {\n  constructor() {\n    super('Solid');\n  }\n}\n\nexport default Solid;\n\n\n\n","import Component from './Component';\n\nclass Movable extends Component {\n  constructor(\n    public moveToX: number = 0,\n    public moveToY: number = 0,\n  ) {\n    super('Movable');\n  }\n\n  public moveTo(x: number, y: number) {\n    this.moveToX = x;\n    this.moveToY = y;\n  }\n\n  public hasMovement(): boolean {\n    return Boolean(this.moveToX || this.moveToY );\n  }\n\n  public reset(): void {\n    this.moveToX = 0;\n    this.moveToY = 0;\n  }\n}\n\nexport default Movable;","import { Colorable, Placeable, Player, ShapeHuman, Movable } from './components';\nimport Entity from './Entity';\n\nclass EntityPlayer extends Entity {\n  public static create(name: string = 'Player'): EntityPlayer {\n    const player = new EntityPlayer(name);\n    player.is(new Placeable(1, 1));\n    player.is(new Colorable('green'));\n    player.is(new ShapeHuman());\n    player.is(new Player());\n    player.is(new Movable());\n\n    return player;\n  }\n\n  private constructor(name: string) {\n    super(name);\n  }\n}\n\nexport default EntityPlayer;\n","import { Placeable, Shape, Tile } from './components';\nimport Entity from './Entity';\n\nclass EntityTile extends Entity {\n  public static create(x: number, y: number): EntityTile {\n    const tile = new EntityTile();\n    tile.is(new Tile());\n    tile.is(new Shape(1, 1));\n    tile.is(new Placeable(x, y));\n\n    return tile;\n  }\n\n  constructor() {\n    super('Tile');\n  }\n}\n\nexport default EntityTile;\n","import { Colorable } from './components';\nimport EntityTile from './EntityTile';\n\nclass EntityFloor extends EntityTile {\n  public static readonly SIZE: number = 32;\n\n  public static create(x: number, y: number): EntityFloor {\n    const tile = EntityTile.create(x, y);\n    tile.is(new Colorable('hotpink'));\n    return tile;\n  }\n}\n\nexport default EntityFloor;\n","import { Colorable, Solid } from './components';\nimport EntityTile from './EntityTile';\n\nclass EntityWall extends EntityTile {\n  public static readonly SIZE: number = 32;\n\n  public static create(x: number, y: number): EntityWall {\n    const tile = EntityTile.create(x, y);\n    tile.is(new Colorable('blue'));\n    tile.is(new Solid());\n    return tile;\n  }\n}\n\nexport default EntityWall;\n","import { ComponentId } from './../components';\nimport Entity from '../Entity';\nimport Canvas from '../../engine/Canvas';\nimport Graphics from '../../engine/graphics';\nimport Input from '../../engine/input';\n\nconst hasAllComponents = (a: ComponentId[], b: ComponentId[]) => (\n  a.filter((x) => b.includes(x)).length === b.length\n);\n\nclass System {\n  public static for(entity: Entity): System {\n    return new System(entity);\n  }\n\n  public render(canvas: Canvas, g: Graphics): void {}\n\n  public update(input: Input, delta: number, canvas: Canvas): void {}\n\n  public shouldRun(): System | null {\n    const entityComponents = this.entity.getComponentIds();\n    if (hasAllComponents(entityComponents, this.requires)) {\n      return this;\n    }\n\n    return null;\n  }\n\n  public get requires (): ComponentId[] {\n    return [];\n  }\n\n  protected constructor(\n    protected entity: Entity,\n  ) {}\n}\n\nexport default System;\n","import Constants from '../../Constants';\nimport Canvas from '../../engine/Canvas';\nimport Graphics from '../../engine/graphics';\nimport { Colorable, Placeable, Shape, ComponentId } from '../components';\nimport Entity from '../Entity';\nimport System from './System';\n\nclass RendererSystem extends System {\n  public static for(entity: Entity): RendererSystem {\n    return new RendererSystem(entity);\n  }\n\n  public render(canvas: Canvas, g: Graphics): void {\n    const color = this.getColor();\n    const { x, y } = this.getPosition();\n    const { width, height } = this.getSizes();\n\n    const renderPosX = x * Constants.TILE_SIZE + canvas.camera?.x;\n    const renderPosY = y * Constants.TILE_SIZE + canvas.camera?.y;\n    g.color(color).translate(renderPosX, renderPosY).rect(0, 0, width, height);\n  }\n\n  public get requires (): ComponentId[] {\n    return ['Placeable', 'Shape'];\n  }\n\n  private getColor(): string {\n    return this.entity.get<Colorable>('Colorable')?.color || 'white';\n  }\n\n  private getPosition(): Placeable {\n    return this.entity.get<Placeable>('Placeable');\n  }\n\n  private getSizes(): Shape {\n    return this.entity.get<Shape>('Shape');\n  }\n}\n\nexport default RendererSystem;\n","import { Canvas } from '~engine';\nimport { ComponentId, Movable } from './../components';\nimport Input from '../../engine/input';\nimport Entity from '../Entity';\nimport System from './System';\n\nclass KeyboardSystem extends System {\n  public static for(entity: Entity): KeyboardSystem {\n    return new KeyboardSystem(entity);\n  }\n\n  public update(input: Input, delta: number, canvas: Canvas): void {\n    if (input.isKeyPressed('w')) {\n      this.moveEntity(0, -1);\n    }\n    else if (input.isKeyPressed('s')) {\n      this.moveEntity(0, 1);\n    }\n    else if (input.isKeyPressed('a')) {\n      this.moveEntity(-1, 0);\n    }\n    else if (input.isKeyPressed('d')) {\n      this.moveEntity(1, 0);\n    }\n  }\n\n  public get requires (): ComponentId[] {\n    return ['Placeable', 'Movable', 'Player'];\n  }\n\n  private moveEntity(x: number, y: number) {\n    const mover = this.entity.get<Movable>('Movable');\n    mover.moveTo(x, y);\n  }\n}\n\nexport default KeyboardSystem;\n","import { Placeable } from '~entities/components';\nimport { Canvas } from '~engine';\nimport { ComponentId, Movable } from './../components';\nimport Input from '../../engine/input';\nimport Entity from '../Entity';\nimport System from './System';\n\nclass MovementSystem extends System {\n  public static for(entity: Entity): MovementSystem {\n    return new MovementSystem(entity);\n  }\n\n  public update(input: Input, delta: number, canvas: Canvas): void {\n    const movement = this.getMovement();\n    if (movement.hasMovement) {\n      const position = this.getPosition();\n      position.x += movement.moveToX;\n      position.y += movement.moveToY;\n      movement.reset();\n    }\n  }\n\n  public get requires (): ComponentId[] {\n    return ['Placeable', 'Movable'];\n  }\n\n  private getMovement(): Movable {\n    return this.entity.get<Movable>('Movable');\n  }\n\n  private getPosition(): Placeable {\n    return this.entity.get<Placeable>('Placeable');\n  }\n}\n\nexport default MovementSystem;\n","export interface Room {\n  doors: {\n    top: boolean,\n    bottom: boolean,\n    left: boolean,\n    right: boolean,\n  },\n  tiles: number[][];\n};\n\nclass WorldRoom {\n  public static getRandomRoom(where?: 'top' | 'bottom' | 'left' | 'right'): Room {\n    const possibleRooms = WorldRoom[where || 'rooms'];\n    console.log(where, possibleRooms)\n    const length = possibleRooms.length - 1;\n    const index = Math.round(Math.random() * length);\n    return possibleRooms[index];\n  }\n\n  public static get top(): Room[] {\n    return [WorldRoom.TOP, WorldRoom.TOP_LEFT, WorldRoom.TOP_RIGHT, WorldRoom.TOP_BOTTOM];\n  }\n\n  public static get bottom(): Room[] {\n    return [WorldRoom.BOTTOM, WorldRoom.BOTTOM_LEFT, WorldRoom.BOTTOM_RIGHT, WorldRoom.TOP_BOTTOM];\n  }\n\n  public static get left(): Room[] {\n    return [WorldRoom.LEFT, WorldRoom.TOP_LEFT, WorldRoom.BOTTOM_LEFT, WorldRoom.LEFT_RIGHT];\n  }\n\n  public static get right(): Room[] {\n    return [WorldRoom.RIGHT, WorldRoom.TOP_RIGHT, WorldRoom.BOTTOM_RIGHT, WorldRoom.LEFT_RIGHT];\n  }\n\n  public static get rooms(): Room[] {\n    return [\n      WorldRoom.CENTER,\n      WorldRoom.LEFT,\n      WorldRoom.RIGHT,\n      WorldRoom.TOP,\n      WorldRoom.BOTTOM,\n      WorldRoom.TOP_LEFT,\n      WorldRoom.TOP_RIGHT,\n      WorldRoom.TOP_BOTTOM,\n      WorldRoom.BOTTOM_LEFT,\n      WorldRoom.BOTTOM_RIGHT,\n      WorldRoom.LEFT_RIGHT,\n    ];\n  }\n\n  public static get CENTER(): Room {\n    return {\n      doors: {\n        top: true,\n        bottom: true,\n        left: true,\n        right: true,\n      },\n      tiles: [\n        [1, 1, 1, 1, 0, 0, 1, 1, 1, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 1, 1, 1, 0, 0, 1, 1, 1, 1],\n      ],\n    };\n  }\n\n  public static get LEFT(): Room {\n    return {\n      doors: {\n        top: false,\n        bottom: false,\n        left: true,\n        right: false,\n      },\n      tiles: [\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n      ],\n    };\n  }\n\n  public static get RIGHT(): Room {\n    return {\n      doors: {\n        top: false,\n        bottom: false,\n        left: false,\n        right: true,\n      },\n      tiles: [\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n      ],\n    };\n  }\n\n  public static get TOP(): Room {\n    return {\n      doors: {\n        top: true,\n        bottom: false,\n        left: false,\n        right: false,\n      },\n      tiles: [\n        [1, 1, 1, 1, 0, 0, 1, 1, 1, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n      ],\n    };\n  }\n\n  public static get BOTTOM(): Room {\n    return {\n      doors: {\n        top: false,\n        bottom: true,\n        left: false,\n        right: false,\n      },\n      tiles: [\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 1, 1, 1, 0, 0, 1, 1, 1, 1],\n      ],\n    };\n  }\n\n  public static get TOP_LEFT(): Room {\n    return {\n      doors: {\n        top: true,\n        bottom: false,\n        left: true,\n        right: false,\n      },\n      tiles: [\n        [1, 1, 1, 1, 0, 0, 1, 1, 1, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n      ],\n    };\n  }\n\n  public static get TOP_RIGHT(): Room {\n    return {\n      doors: {\n        top: true,\n        bottom: false,\n        left: false,\n        right: true,\n      },\n      tiles: [\n        [1, 1, 1, 1, 0, 0, 1, 1, 1, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n      ],\n    };\n  }\n\n  public static get TOP_BOTTOM(): Room {\n    return {\n      doors: {\n        top: true,\n        bottom: true,\n        left: false,\n        right: false,\n      },\n      tiles: [\n        [1, 1, 1, 1, 0, 0, 1, 1, 1, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 1, 1, 1, 0, 0, 1, 1, 1, 1],\n      ],\n    };\n  }\n\n  public static get BOTTOM_LEFT(): Room {\n    return {\n      doors: {\n        top: false,\n        bottom: true,\n        left: true,\n        right: false,\n      },\n      tiles: [\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 1, 1, 1, 0, 0, 1, 1, 1, 1],\n      ],\n    };\n  }\n\n  public static get BOTTOM_RIGHT(): Room {\n    return {\n      doors: {\n        top: false,\n        bottom: true,\n        left: false,\n        right: true,\n      },\n      tiles: [\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 1, 1, 1, 0, 0, 1, 1, 1, 1],\n      ],\n    };\n  }\n\n  public static get LEFT_RIGHT(): Room {\n    return {\n      doors: {\n        top: false,\n        bottom: false,\n        left: true,\n        right: true,\n      },\n      tiles: [\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n      ],\n    };\n  }\n}\n\nexport default WorldRoom;\n","import { EntityFloor, EntityWall } from '../entities';\nimport Constants from '../Constants';\nimport World from './World';\n\nclass WorldMap {\n  public static readonly NONE = -1;\n  public static readonly FLOOR = 0;\n  public static readonly WALL = 1;\n\n  public spawnX: number;\n  public spawnY: number;\n\n  private map: number[][];\n\n  constructor(public size: number = 128) {\n    this.reset();\n  }\n\n  public setTile(x: number, y: number, type: number) {\n    if (this.map[x] !== undefined && this.map[x][y] !== undefined) {\n      this.map[x][y] = type;\n    }\n  }\n\n  public getTile(x: number, y: number): number | null {\n    return this.map[x] && this.map[x][y];\n  }\n\n  public setSpawn(x: number, y: number): void {\n    this.spawnX = x;\n    this.spawnY = y;\n  }\n\n  public registerComponents(world: World): void {\n    this.map.forEach((row, x) => {\n      row.forEach((id, y) => {\n        if (id === WorldMap.WALL) {\n          world.spawn(EntityWall.create(x, y))\n          return;\n        }\n\n        if (id === WorldMap.FLOOR) {\n          world.spawn(EntityFloor.create(x, y));\n        }\n      });\n    });\n  }\n\n  public reset(): void {\n    this.map = Array(this.size).fill(0).map(\n      () => Array(this.size).fill(0).map(() => WorldMap.NONE)\n    );\n  }\n}\n\nexport default WorldMap;\n","import Entity, { EntityPlayer, EntityTile } from '../entities';\nimport { KeyboardSystem, MovementSystem, RendererSystem } from '../entities/systems';\nimport { Canvas, Renderer, Updater } from '../engine';\nimport Input from '../engine/input';\nimport Graphics from '../engine/graphics';\nimport WorldGenerate from './WorldGenerate';\nimport { Placeable } from '~entities/components';\nimport WorldMap from './WorldMap';\n\nclass World implements Renderer, Updater {\n  private entities: Entity[];\n  private entitiesToDraw: Entity[];\n  private map: WorldMap;\n  private player: Entity;\n\n  constructor() {\n    this.entities = [];\n    this.entitiesToDraw = [];\n  }\n\n  public init(canvas: Canvas): void {\n    this.map = WorldGenerate.generate(120);\n    this.map.registerComponents(this);\n\n    const { spawnX, spawnY } = this.map;\n    this.player = EntityPlayer.create('Vornian');\n    this.spawn(this.player, spawnX, spawnY);\n  }\n\n  public render(canvas: Canvas, g: Graphics): void {\n    this.entitiesToDraw.forEach((entity) => {\n      RendererSystem.for(entity).render(canvas, g);\n    });\n\n    this.entitiesToDraw = [];\n  }\n\n  public update(input: Input, delta: number, canvas: Canvas): void {\n    this.entities.forEach((entity) => {\n      KeyboardSystem.for(entity).shouldRun()?.update(input, delta, canvas);\n      MovementSystem.for(entity).shouldRun()?.update(input, delta, canvas);\n\n      if (entity.isDrawable()) {\n        this.draw(entity);\n      }\n    });\n  }\n\n  public spawn(entity: Entity, x?: number, y?: number): void {\n    if (x !== undefined && y !== undefined) {\n      const position = entity.get<Placeable>('Placeable');\n      position?.set(x, y);\n    }\n\n    this.entities[entity.id] = entity;\n  }\n\n  public getPlayer(): EntityPlayer {\n    return this.player;\n  }\n\n  private draw(entity: Entity): void {\n    this.entitiesToDraw.push(entity);\n  }\n}\n\nexport default World;\n","import WorldRoom, { Room } from './WorldRoom';\nimport WorldMap from './WorldMap';\n\nclass WorldGenerate {\n  public static generate(size: number = 128): WorldMap {\n    const map: WorldMap = new WorldMap(size);\n    this.generateRooms(map);\n\n    return map;\n  }\n\n  private static generateRooms(map: WorldMap): void {\n    const rooms: Room[][] = Array(2).fill(0).map(() => Array(2));\n    \n    const spawnPoints = [\n      { x: Math.round(map.size/2) - 5, y: Math.round(map.size/2) - 5, direction: null },\n    ];\n    const roomPoints = [Object.values(spawnPoints[0]).join(',')];\n\n    map.setSpawn(spawnPoints[0].x + 5, spawnPoints[0].y + 5);\n\n    while (spawnPoints.length > 0) {\n      const { x, y, direction } = spawnPoints.shift();\n\n      if (roomPoints.includes([x, y].join(','))) {\n        continue;\n      }\n\n      const room = direction ? WorldRoom.getRandomRoom(direction) : WorldRoom.CENTER;\n      this.placeRoom(x, y, room, map);\n      roomPoints.push([x, y].join(','));\n\n      if (room.doors.top) {\n        spawnPoints.push({ x, y: y - 9, direction: 'bottom' });\n      }\n\n      if (room.doors.bottom) {\n        spawnPoints.push({ x, y: y + 9, direction: 'top' });\n      }\n\n      if (room.doors.left) {\n        spawnPoints.push({ x: x - 9, y, direction: 'right' });\n      }\n\n      if (room.doors.right) {\n        spawnPoints.push({ x: x + 9, y, direction: 'left' });\n      }\n    }\n  }\n\n  private static placeRoom(x: number, y: number, room: Room, map: WorldMap) {\n    for(let i=0; i < 10; i++) {\n      for(let j=0; j < 10; j++) {\n        const isFloor = room.tiles[j][i] === 0;\n        const tile = isFloor ? WorldMap.FLOOR : WorldMap.WALL;\n        map.setTile(x + i, y + j, tile);\n      }\n    }\n  }\n}\n\nexport default WorldGenerate;\n","import WebGame from './engine/WebGame';\nimport Hagokia from './Hagokia';\n\nconst canvas = document.getElementById('canvas'); \nconst webGame = new WebGame(canvas as HTMLCanvasElement);\nwebGame.init(new Hagokia());\n","import Game from './Game'\nimport Canvas from './Canvas';\nimport Graphics from './graphics';\nimport Input from './input';\n\nclass WebGame {\n  private canvas: Canvas;\n  private ctx: CanvasRenderingContext2D;\n\n  private graphics: Graphics;\n  private input: Input;\n\n  private game: Game;\n\n  constructor(canvas: HTMLCanvasElement) {\n    this.canvas = Canvas.fromHTMLCanvas(canvas);\n    this.ctx = canvas.getContext('2d');\n    this.ctx.imageSmoothingEnabled = true;\n    this.ctx.imageSmoothingQuality = 'high';\n  }\n\n  public init(game: Game): void {\n    this.game = game;\n    this.graphics = new Graphics(this.canvas, this.ctx);\n    this.input = new Input();\n\n    this.game.init(this.canvas);\n    this.requestAnimationFrame();\n  }\n\n  private gameLoop(): void {\n    this.game.update(this.input, 1.0, this.canvas);\n    this.input.keyboard.pool();\n\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.game.render(this.canvas, this.graphics);\n\n    this.requestAnimationFrame();\n  }\n\n  private requestAnimationFrame(): void {\n    window.requestAnimationFrame(this.gameLoop.bind(this));\n  }\n}\n\nexport default WebGame;\n","import { Canvas, Game, Camera } from './engine';\nimport Graphics from './engine/graphics';\nimport Input from './engine/input';\nimport World from './world';\n\nclass Hagokia implements Game {\n  private world: World;\n  private camera: Camera;\n\n  constructor() {\n    this.world = new World();\n    this.camera = new Camera();\n  }\n\n  init(canvas: Canvas): void {\n    console.log('Game init.');\n\n    this.world.init(canvas);\n\n    canvas.useCamera(this.camera);\n    this.camera.follow(this.world.getPlayer());\n  }\n\n  render(canvas: Canvas, g: Graphics): void {\n    this.world.render(canvas, g);\n  }\n\n  update(input: Input, delta: number, canvas: Canvas): void {\n    this.world.update(input, delta, canvas);\n    this.camera.update(input, delta, canvas);\n  }\n}\n\nexport default Hagokia;\n"],"names":["$546701f85e14d9de58b49f17977dbafe$export$default","width","height","htmlCanvas","canvas","onWindowResize","window","innerWidth","innerHeight","addEventListener","bind","this","useCamera","camera","constructor","$94aab8f2e4b993907dcded5749710bb3$export$default","ctx","save","restore","translate","x","y","rotate","deg","color","fillStyle","rect","fillRect","resetTransform","$47a8dd1e0cb0bb7a035171056d2c3144$export$default","states","createEventsListeners","pool","Object","keys","forEach","key","findNextState","onKeyDown","onKeyUp","DOWN","PRESSED","UP","NONE","$a8a9c7993fa6e327e6ab4be019cdc2ca$export$default","keyboard","console","log","isKeyDown","isKeyUp","isKeyPressed","$b74a9ba2b83f33f0a0d1b71b22617aa4$export$default","$8e7a75341a90ca59a8425e50c4961470$export$default","follow","entity","target","update","input","delta","centerTargetIfExists","get","TILE_SIZE","$afb7bd5bdc83073c5a824ff443ec7526$export$default","name","id","sequence","components","is","component","getKey","isNot","getComponentIds","isDrawable","Boolean","values","find","$98c03d64ce00a231b63a1ac6884bcf5e$export$default","$1f302363ba0701e0a5c8cf8e4eb553a2$export$default","super","set","$58d111a5e9b34cdde4428027c04eb0a8$export$default","$7878ce8de8df49fa125ed0fe6d22beb2$export$default","$32e7dd13a75f28548f81f6803b3a3a30$export$default","$df5346b90ca4519f134aaa61c2a639a0$export$default","$02447c7afa2ee3dbd01b1fc9275aa7df$export$default","$bb8f4303bfce493a624c29b5fbc34789$export$default","$c80c9301aaf5c5d9e889941aefc9e1d4$export$default","$649b2759829ea2c8037e1077c550a0b7$export$default","moveToX","moveToY","moveTo","hasMovement","reset","$2670e351154e299705e0b8760bb1b2c7$export$default","player","$16d88d33cc2be75f9e901e165847c4f9$export$default","tile","$5c293f3ec1964db8fdf1020969007b3b$export$default","create","$a23986a5521a12e48e39e646c037ca3c$export$default","$739fdd702465aa160fdeadf89b52dfa8$export$default","render","g","shouldRun","entityComponents","a","b","requires","filter","includes","length","$c830817a4e2510e2b61f402ca4f355bc$export$default","getColor","getPosition","getSizes","renderPosX","renderPosY","$55687d21aa8bbbd04aaccc016f11b8ef$export$default","moveEntity","$74351ef5a335db05e5983c375faba99b$export$default","movement","getMovement","position","$81b759fafc70f1773113da92435ee4fe$export$default","where","possibleRooms","Math","round","random","TOP","TOP_LEFT","TOP_RIGHT","TOP_BOTTOM","BOTTOM","BOTTOM_LEFT","BOTTOM_RIGHT","LEFT","LEFT_RIGHT","RIGHT","CENTER","doors","top","bottom","left","right","tiles","$c7baf97dca1f6620504a51ab300f5a8d$export$default","size","setTile","type","undefined","map","getTile","setSpawn","spawnX","spawnY","registerComponents","world","row","WALL","FLOOR","spawn","Array","fill","$91f362c2855207d73299a63865b0bdc5$export$default","entities","entitiesToDraw","init","generateRooms","spawnPoints","direction","roomPoints","join","shift","room","getRandomRoom","placeRoom","push","i","j","isFloor","generate","for","draw","getPlayer","$8d10e2b035c8e6d9dff8f94d4db9d773$var$canvas","document","getElementById","$8d10e2b035c8e6d9dff8f94d4db9d773$var$webGame","fromHTMLCanvas","getContext","imageSmoothingEnabled","imageSmoothingQuality","game","graphics","requestAnimationFrame","gameLoop","clearRect"],"version":3,"file":"index.4892f020.js.map"}